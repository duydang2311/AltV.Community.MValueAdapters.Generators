namespace AltV.Community.MValueAdapters.Generators.Constants;

internal static class Templates
{
    internal const string ConverterTemplate = @"// <auto-generated>
//     Automatically generated.
//     Changes made to this file may be lost and may cause undesirable behaviour.
// </auto-generated>

namespace AltV.Community.MValueAdapters.Generators;

using AltV.Net;
using AltV.Net.Elements.Args;
using AltV.Net.Shared;
using {0};

public sealed class {1}Adapter : IMValueAdapter<{1}>
{{
    object IMValueBaseAdapter.FromMValue(IMValueReader reader) => FromMValue(reader);

    public {1} FromMValue(IMValueReader reader)
    {{
        var c = new {1}();
        reader.BeginObject();

        while (reader.HasNext())
        {{
            var propertyName = reader.NextName();
            switch (propertyName)
            {{
{2}
                default:
                    reader.SkipValue();
                    continue;
            }}
        }}

        reader.EndObject();
        return c;
    }}

    public void ToMValue(object obj, IMValueWriter writer)
    {{
        if (obj is not {1} value) return;
        ToMValue(value, writer);
    }}

    public void ToMValue({1} value, IMValueWriter writer)
    {{
        writer.BeginObject();
{3}
        writer.EndObject();
    }}
}}
";

    internal const string ExtensionTemplate = @"// <auto-generated>
//     Automatically generated.
//     Changes made to this file may be lost and may cause undesirable behaviour.
// </auto-generated>

using AltV.Community.MValueAdapters.Generators;

namespace AltV.Net;

public static class AltExtensions
{{
    public static void RegisterAdapters()
    {{
{0}
    }}
}}
";

    internal const string AdapterTemplate = @"        AltV.Net.Shared.AltShared.Core.RegisterMValueAdapter(new {0}Adapter());		
        AltV.Net.Shared.AltShared.Core.LogInfo($""Registered MValueAdapter: {0}"");";
}
